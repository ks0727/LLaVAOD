import sys

grounding_dino_path = "/po4/ksakai/models/GroundingDINO/"
sys.path.append(grounding_dino_path)

from groundingdino.util.inference import load_model,load_image,predict,annotate

from PIL import Image
import warnings
from typing import Union

class GroundingDino:
    def __init__(self,model_path:str,weight_path:str,bbox_threshold:float,text_threshold:float,max_num_objects:int):
        """
        model_path (str): the path to grounding dino
        weight_path(str) : the path to the weight of grounding dino
        bbox_threshold (float) : bounding box threshold to predict bounding  boxes.
        text_threshold (fload) : text threshold to predict bounding boxes.
        """
        self.model_path = model_path
        self.weight_path = weight_path
        self.bbox_threshold = bbox_threshold
        self.text_threshold = text_threshold
        self.max_num_objects = max_num_objects
        print("come here")
        try:
            self.model = load_model(model_path,weight_path)
        except Exception  as e:
            print(e)
            warnings.warn("could not load the grounding dino model.please make sure that model path and weight path are correct.")
            exit(-1)


        self.model = self.model.cuda()

    def get_bboxes(self,image_path,object_list:Union[list,str]):
        """
        --------------------------------------------------------------------
        Input
        object_list(list,str) : the list of objects that was appeared in the
        prompt. (should be generated by MLLM)
        ---------------------------------------------------------------------
        Return
        object_bboxes(list of dist) : [{label:the name of the object, bbox:bounding box value}]

        """

        if isinstance(image_path,str):
            image = Image.open(image_path).convert('RBG')
        else:
            image = image_path

        if isinstance(object_list,str):
            object_list = [object_list]

        assert type(object_list) == list, ("object list is supposed to be the list, please make sure the type of the object list is either 'str' or 'list'.")

        if len(object_list) > self.max_num_objects:
            print("There are too many objects to search. please reduce the amount of number of objects.")
            exit(-1)

        image_source,image = load_image(image_path)

        object_bboxes = []
        for _object in object_list:
            bboxes,logits,phrases = predict(
                self.model,
                image=image,
                caption=_object,
                box_threshold=self.bbox_threshold,
                text_threshold=self.text_threshold
            )

            object_bboxes.append(dict(label=_object,bbox=bboxes))

        return object_bboxes



